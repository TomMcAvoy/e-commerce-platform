const request = require('supertest');
const app = require('../../app'); // Adjust the path as necessary

describe('Cross-Category Integration Tests', () => {
    it('should handle products from multiple categories in cart', async () => {
        const item = { productId: 'test-product', quantity: 1 };
        const response = await request(app)
            .post('/api/cart/add')
            .send(item)
            .expect(200);

        expect(response.body.success).toBe(true);
    });

    it('should calculate shipping costs for mixed categories', async () => {
        const response = await request(app)
            .post('/api/cart/calculate-shipping')
            .send({ destination: { postalCode: '10001', country: 'US' } })
            .expect(200);

        expect(response.body.success).toBe(true);
        expect(response.body.shippingOptions).toBeDefined();
    });

    it('should search across all categories', async () => {
        const response = await request(app)
            .get('/api/products/search?q=bluetooth')
            .expect(200);

        expect(response.body.success).toBe(true);
        expect(response.body.data).toBeDefined();
        expect(response.body.categoryCounts).toBeDefined();
    });

    it('should provide category-specific faceted search', async () => {
        const response = await request(app)
            .get('/api/products/search/facets?q=bluetooth')
            .expect(200);

        expect(response.body.success).toBe(true);
        expect(response.body.facets.categories).toBeDefined();
    });

    it('should handle orders from multiple suppliers', async () => {
        const orderData1 = { /* order details for supplier 1 */ };
        const orderData2 = { /* order details for supplier 2 */ };
        const result1 = await request(app).post('/api/dropshipping/orders').send(orderData1);
        const result2 = await request(app).post('/api/dropshipping/orders').send(orderData2);

        expect(result1.body.success).toBe(true);
        expect(result2.body.success).toBe(true);
        expect(result1.body.orderId).toBeDefined();
        expect(result2.body.orderId).toBeDefined();
    });

    it('should provide cross-category analytics', async () => {
        const response = await request(app)
            .get('/api/analytics/categories/performance')
            .expect(200);

        expect(response.body.success).toBe(true);
        expect(response.body.data.categoryMetrics).toBeDefined();
    });

    it('should track conversion rates by category', async () => {
        const response = await request(app)
            .get('/api/analytics/categories/conversion-rates')
            .expect(200);

        expect(response.body.success).toBe(true);
    });
});