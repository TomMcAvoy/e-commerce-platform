import express, { Express, Request, Response } from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { connectDB } from './config/db';
import { errorHandler } from './middleware/errorHandler';
import routes from './routes';
import { Server } from 'http';

// Load environment variables
dotenv.config();

const app: Express = express();

// ✅ Prevent server startup in test environment following project patterns
if (process.env.NODE_ENV !== 'test' && process.env.SKIP_SERVER_START !== 'true') {
  connectDB();
}

// CORS configuration for development workflow
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? process.env.FRONTEND_URL 
    : 'http://localhost:3001', // Frontend development server
  credentials: true
}));

// Security middleware
app.use(helmet());

// Rate limiting with test-friendly settings
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: process.env.NODE_ENV === 'test' ? 1000 : 100, // Higher limit for tests
});
app.use(limiter);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// API Routes following project structure
app.use('/api', routes);

// Health check endpoint for debugging dashboard
app.get('/health', (req: Request, res: Response) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV,
    port: process.env.PORT || 3000
  });
});

// API status endpoint for testing
app.get('/api/status', (req: Request, res: Response) => {
  res.status(200).json({
    api: 'E-Commerce Platform API',
    version: '1.0.0',
    status: 'running',
    environment: process.env.NODE_ENV
  });
});

// Error handling middleware using project's AppError pattern
app.use(errorHandler);

const PORT = process.env.PORT || 3000;

// ✅ Properly typed server instance for development workflow
let server: Server | undefined;

if (process.env.NODE_ENV !== 'test' && process.env.SKIP_SERVER_START !== 'true') {
  server = app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);
    console.log(`📊 Debug Dashboard: http://localhost:3001/debug`);
    console.log(`🏥 Health Check: http://localhost:${PORT}/health`);
  });
}

// ✅ Helper function for safe address access in tests
export const getServerAddress = () => {
  if (!server) {
    // Return mock address for test environment
    return { port: PORT, address: '127.0.0.1' };
  }
  
  const address = server.address();
  if (!address) {
    throw new Error('Server not bound to any address');
  }
  
  return typeof address === 'string' 
    ? { address, port: null }
    : address;
};

// Export for testing and external use
export { app, server };

